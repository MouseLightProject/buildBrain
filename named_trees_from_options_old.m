function result = named_trees_from_options_old(skeleton_graph, ...
                                               skeleton_ijks, ...
                                               component_id_from_component_index, ...
                                               component_from_component_index, ...
                                               size_from_component_index, ...
                                               max_component_id, ...
                                               options, ...
                                               params)
    top_level_spacing_in_nm = [params.sx params.sy params.sz] ;
    origin_in_nm = [params.ox params.oy params.oz] ;
    levels_below_top_level = params.level ;
    
    spacing_at_full_zoom = top_level_spacing_in_nm/2^(levels_below_top_level)/1e3 ;  % in um, at highest zoom level
    spacing_in_nm = top_level_spacing_in_nm / 2^levels_below_top_level ;
    size_threshold = options.sizethreshold ;
    length_threshold = options.length_threshold ;
    do_visualize = options.viz ;

    component_count = length(component_from_component_index) ;
    fprintf('Components are in hand!  There are %d of them.\n', component_count) ;
    if component_count > 0 ,
        fprintf('The largest component contains %d nodes.\n', size_from_component_index(1)) ;
    end

    % This will be useful in various places, so do it once here    
    A = skeleton_graph.adjacency ;  % adjacency matrix, node_count x node_count, with zeros on the diagonal
    
    %%
    fprintf('Starting the for loop, going to process %d components...\n', component_count) ;
    parfor_progress(component_count) ;
    result = preallocate_forest_of_named_trees([component_count 1]) ;
    for component_index = 1 : component_count ,
        % Process this component
        component_id = component_id_from_component_index(component_index) ;
        component = component_from_component_index{component_index} ;
        ijks_for_component = skeleton_ijks(component,:) ;        
        %G_for_component = G.subgraph(component) ;  % very very very slow!
        A_for_component = A(component, component) ;  
        named_tree = process_single_component_as_function_old(component_id, ...
                                                              component, ...
                                                              max_component_id, ...
                                                              A_for_component, ...
                                                              ijks_for_component, ...
                                                              size_threshold, ...
                                                              length_threshold, ...
                                                              do_visualize, ...
                                                              origin_in_nm, ...
                                                              spacing_in_nm, ...
                                                              spacing_at_full_zoom, ...
                                                              options, ...
                                                              params) ;
        result(component_index) = named_tree ;

        % Update the progress bar
        parfor_progress() ;
    end
    parfor_progress(0) ;       
end
